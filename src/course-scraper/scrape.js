import fs from 'fs';
import parseArgs from 'minimist';
import { getScheduleJson, parseScheduleJson } from './schedule.js';
import { getCourseJson, parseCourseJson } from './course.js';

const scrapeCourseIds = (courseIds, shortSem) => {
  let scraped = [];
  let skipped = [];
  for (const [i, courseId] of courseIds.entries()) {
    if (i % 10 == 0) {
      console.log(`Scraped ${i} courses`);
    }

    try {
      const courseJson = await getCourseJson(courseId, shortSem, false);
      const parsedCourse = parseCourseJson(courseJson);
      scraped.push({ courseId, ...parsedCourse });
    } catch (e) {
      console.log(`Unable to scrape ${courseId}, skipping...`);
      skipped.push(courseId);
    }
  }

  return { scraped, skipped };
};

/*
  Parse schedule from Semester Schedule Page
    --schedule fall schedule.json
  Scrape single course
    --course 15122 --semester F20 15122_F20.json
  Scrape all courses from schedule (generated by --schedule)
    --courses -i schedule.json schedule_detailed.json
*/

const argv = parseArgs(process.argv.slice(2), {});
console.log(argv);

(async () => {
  const scrapeInfo = {
    date: new Date(),
    args: argv
  };

  if (argv?.schedule) {
    const semester = argv.schedule;
    const outputFile = argv?._[0] || 'schedules.json';

    // TODO: special logic for summer - combine summer_1 and summer_2
    const outputJson;
    if (semester === 'summer') {
      const summerOneJson = await getScheduleJson('summer_1');
      const summerTwoJson = await getScheduleJson('summer_2');

      const parsedScheduleOne = parseScheduleJson(summerOneJson);
      const parsedScheduleTwo = parseScheduleJson(summerTwoJson);

      outputJson = { scrapeInfo,
        schedules: [{ semester: 'summer_1', ...parsedScheduleOne },
                   { semester: 'summer_2', ...parsedScheduleTwo }]};
    } else {
      const scheduleJson = await getScheduleJson(semester);
      const parsedSchedule = parseScheduleJson(scheduleJson);
      outputJson = { scrapeInfo, 
        schedules: [{ semester: semester, ...parsedSchedule }] };
    }

    await fs.promises.writeFile(outputFile, JSON.stringify(outputJson,
                                                           null, 2));
  } else if (argv?.course) {
    let course = argv?.course.toString();
    if (course.length === 4) course = '0' + course;

    const outputFile = argv?._[0] || `${course}_${argv.semester}.json`;

    const courseJson = await getCourseJson(course, argv.semester);
    const parsedCourse = parseCourseJson(courseJson);

    const outputJson = { scrapeInfo, ...parsedCourse };

    await fs.promises.writeFile(outputFile, JSON.stringify(outputJson,
                                                           null, 2));
  } else if (argv?.courses) {

    if (!argv?.i) {
      console.log(`Pass a JSON file generated by --schedule to the -i flag`);
      return;
    }

    const outputFile = argv?._[0] || 'schedules.json';
    const inputFile = argv?.i;

    const parsedScheduleStream = await fs.promises.readFile(inputFile);
    const parsedSchedule = JSON.parse(parsedScheduleStream.toString());

    let courseIds; 

    const semester = parsedSchedule.scrapeInfo.semester;
    const year = parsedSchedule.schedules[0].semester.match(/20[0-9]{2}/)[1];

    let output;

    if (semester === 'fall' || semester === 'spring') {
      const shortSem = (semester === 'fall' ? 'F' : 'S') + year;

      const courseIds = [...new Set(
        parsedSchedule.schedules[0].courses.map(course =>
          course.id
      ))];

      console.log(`Found ${courseIds.length} unique course IDs.`);
      output = scrapeCourseIds(courseIds, shortSem);
    } else if (semester === 'summer') {
      let summerOneCourseIdsSet = new Set(
        parsedSchedule.schedules[0].courses.map(course => course.id));
      let summerTwoCourseIdsSet = new Set(
        parsedSchedule.schedules[1].courses.map(course => course.id));
      
      let summerOneCourseIds = [...summerOneCourseIdsSet];
      let summerTwoOnly = [...summerTwoCourseIdsSet].filter(courseId =>
        !summerOneCourseIdsSet.has(courseId));
      
      console.log(`Found ${summerOneCourseIds.length} unique course IDs ` +
                  `for summer one/all.`);
      console.log(`Found ${summerTwoOnly.length} unique course IDs ` +
                  `for summer two only.`);

      let { summerOneScraped, summerOneSkipped} =
        scrapeCourseIds(summerOneCourseIds, 'M' + year);
      
      let { summerTwoOnlyScraped, summerTwoOnlySkipped} =
        scrapeCourseIds(summerTwoOnly, 'N' + year);
      
      output = {
        scraped: [...summerOneScraped, summerTwoOnlyScraped],
        skipped: [...summerOneSkipped, summerTwoOnlySkipped]
      };

    } else {
      console,log(`Unrecognized semester ${semester}.`);
      return;
    }
    
    output = { scrapeInfo, ...output };

    await fs.promises.writeFile(outputFile, JSON.stringify(output,
                                                           null, 2));
  }
})();