import fs from 'fs';
import parseArgs from 'minimist';
import { getScheduleJson, parseScheduleJson } from './schedule.js';
import { getCourseJson, parseCourseJson } from './course.js';

const argv = parseArgs(process.argv.slice(2), {});
console.log(argv);

/*
  Parse schedule from Semester Schedule Page
    --schedule fall schedule.json
  Scrape single course
    --course 15122 --semester F20 15122_F20.json
  Scrape all courses from schedule (generated by --schedule)
    --courses -i schedule.json schedule_detailed.json
*/

(async () => {
  const scrapeInfo = {
    date: new Date(),
    args: argv
  };

  if (argv?.schedule) {
    const semester = argv.schedule;
    const outputFile = argv?._[0] || 'schedules.json';

    const scheduleJson = await getScheduleJson(semester);
    const parsedSchedule = parseScheduleJson(scheduleJson);

    const outputJson = { scrapeInfo, ...parsedSchedule };

    await fs.promises.writeFile(outputFile, JSON.stringify(outputJson,
                                                           null, 2));
  } else if (argv?.course) {
    let course = argv?.course.toString();
    if (course.length === 4) course = '0' + course;

    const outputFile = argv?._[0] || `${course}_${argv.semester}.json`;

    const courseJson = await getCourseJson(course, argv.semester);
    const parsedCourse = parseCourseJson(courseJson);

    const outputJson = { scrapeInfo, ...parsedCourse };

    await fs.promises.writeFile(outputFile, JSON.stringify(outputJson,
                                                           null, 2));
  } else if (argv?.courses) {

    if (!argv?.i) {
      console.log(`Pass a JSON file generated by --schedule to the -i flag`);
      return;
    }

    const outputFile = argv?._[0] || 'schedules.json';
    const inputFile = argv?.i;

    const parsedScheduleStream = await fs.promises.readFile(inputFile);
    const parsedSchedule = JSON.parse(parsedScheduleStream.toString());

    const courseIds = [...new Set(parsedSchedule.courses.map(course =>
        course.id))];

    console.log(`Found ${courseIds.length} unique courses IDs.`);

    let shortSem = "";
    const semester = parsedSchedule.semester;
    const year = semester.match(/20([0-9]{2})/)[1];
    if (semester.includes("Fall")) shortSem = "F";
    else if (semester.includes("Summer One")) shortSem = "M";
    else if (semester.includes("Summer Two")) shortSem = "N";
    else if (semester.includes("Spring")) shortSem = "S";
    else {
      console.log(`Unrecognized semester ${semester}.`);
      return;
    }
    shortSem = shortSem + year;
    
    let scraped = [];
    let skipped = [];
    for (const [i, courseId] of courseIds.entries()) {
      if (i % 10 == 0) {
        console.log(`Scraped ${i} courses`);
      }

      try {
        const courseJson = await getCourseJson(courseId, shortSem, false);
        const parsedCourse = parseCourseJson(courseJson);
        scraped.push({ courseId, ...parsedCourse });
      } catch (e) {
        console.log(`Unable to scrape ${courseId}, skipping...`);
        skipped.push(courseId);
      }
    }

    const output = { scrapeInfo, scraped, skipped };

    await fs.promises.writeFile(outputFile, JSON.stringify(output,
                                                           null, 2));
  }
})();